local EventManager = require("ge_tts.EventManager")
local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local Search = require("sebaestschjin-tts.Search")

local Component = require("gloomhaven-campaign-manager.Component")
local EventType = require("gloomhaven-campaign-manager.EventType")

local Event = {}

---@param savefile gh_Savefile
function Event.setup(savefile)
    EventManager.addHandler(EventType.Loaded.Expansion, function()
        Event.loadAll(savefile.events)
    end)
end

local StartingEvents = 30
local ExpansionStartingEvent = 82

---@param eventDecks gh_Save_EventDecks
function Event.loadAll(eventDecks)
    for deckType, _ in pairs(Component.EventDecks) do
        Event.load(deckType, eventDecks[deckType])
    end
end

---@param deckType string
---@param eventDeck gh_Save_EventDeck
function Event.load(deckType, eventDeck)
    Logger.info("Loading event deck %s", deckType)
    local eventsInfo = Component.EventDecks[deckType]
    local initialEventsDeck = Component.initialEventDeck(eventsInfo)
    local completeEventsDeck = Component.eventDeck(eventsInfo)
    completeEventsDeck.putObject(initialEventsDeck)

    local bottomCards = Event.findBottomDeck(eventDeck, completeEventsDeck)
    local addedCards = Event.findAddedCards(eventDeck, completeEventsDeck, bottomCards)
    local removedCards = Event.findRemovedCards(eventDeck, completeEventsDeck)

    TableUtil.shuffle(addedCards)
    local eventCards = TableUtil.merge(bottomCards, addedCards)

    Event.dealEvents(completeEventsDeck, eventCards, eventsInfo)
    Event.removeEvents(completeEventsDeck, removedCards, eventsInfo)
end

---@param events gh_Save_EventDeck
---@param deck seb_WrappedDeck
---@return GUID[]
function Event.findBottomDeck(events, deck)
    local eventsToAdd = {}
    if events then
        for _, event in TableUtil.pairs(events.bottomUp) do
            local eventName = string.format("%02d", event)
            local eventCard = --[[---@not nil]] Search.inContainedObjects(deck, { name = eventName })
            if eventCard then
                table.insert(eventsToAdd, Object.guid(eventCard))
            else
                Logger.warn("No event card %s found for deck %s", eventName, deck.getName())
            end
        end
    end

    return eventsToAdd
end

---@param events gh_Save_EventDeck
---@param deck seb_WrappedDeck
---@param alreadyAdded GUID[]
---@return GUID[]
function Event.findAddedCards(events, deck, alreadyAdded)
    local eventsToAdd = {}
    for _, eventCard in ipairs(deck.getObjects()) do
        local eventNumber = --[[---@not nil]] tonumber(Object.name(eventCard))
        if not TableUtil.contains(alreadyAdded, Object.guid(eventCard))
                and Event.isAdded(events, eventNumber)
                and not Event.isRemoved(events, eventNumber)
        then
            table.insert(eventsToAdd, Object.guid(eventCard))
        end
    end

    return eventsToAdd
end

---@param events gh_Save_EventDeck
---@param deck seb_WrappedDeck
---@return GUID[]
function Event.findRemovedCards(events, deck)
    local eventsRemoved = {}
    for _, eventCard in ipairs(deck.getObjects()) do
        local eventNumber = --[[---@not nil]] tonumber(Object.name(eventCard))
        if Event.isRemoved(events, eventNumber) then
            table.insert(eventsRemoved, Object.guid(eventCard))
        end
    end

    return eventsRemoved
end

---@param eventNumber number
---@param eventDeck seb_WrappedDeck
function Event.find(eventNumber, eventDeck)
    local eventName = string.format("%02d", eventNumber)
    return Search.inContainedObjects(eventDeck, { name = eventName })
end

---@param events gh_Save_EventDeck
---@param eventNumber number
---@return boolean
function Event.isRemoved(events, eventNumber)
    return events and events.remove and TableUtil.contains(events.remove, eventNumber)
end

---@param events gh_Save_EventDeck
---@param eventNumber number
---@return boolean
function Event.isAdded(events, eventNumber)
    return eventNumber <= 30
            or (events and events.add and TableUtil.contains(events.add, eventNumber))
end

---@param deck seb_WrappedDeck
---@param eventCards GUID[]
---@param info gh_EventDeckInfo
function Event.dealEvents(deck, eventCards, info)
    local eventDeck = Component.eventMatDeck(info)
    for _, event in pairs(eventCards) do
        deck.takeObject({
            guid = event,
            position = Component.safePosition(2),
            rotation = { 0, 180, 0 },
            smooth = false,
            callback_function = function(card)
                eventDeck.putObject(--[[---@type tts__Card]] card)
            end
        })
    end
end

---@param deck seb_WrappedDeck
---@param eventCards GUID[]
---@param info gh_EventDeckInfo
function Event.removeEvents(deck, eventCards, info)
    for _, event in pairs(eventCards) do
        deck.takeObject({
            guid = event,
            position = Component.safePosition(2),
            rotation = { 0, 180, 0 },
            smooth = false,
            callback_function = function(card)
                Component.discardEvent(--[[---@type tts__Card]] card, info)
            end
        })
    end
end

---@param savefile gh_Savefile
function Event.saveAll(savefile)
    local events = savefile.events

    for name, info in pairs(Component.EventDecks) do
        local eventDeck = Event.saveEventsFromDeck(info)
        if eventDeck then
            events[name] = eventDeck
        end
    end
end

---@param info gh_EventDeckInfo
---@return gh_Save_EventDeck
function Event.saveEventsFromDeck(info)
    local activeEventsDeck = Component.eventMatDeck(info)
    local availableEventsDeck = Component.eventDeck(info)
    local savedDeckInfo = --[[---@type gh_Save_EventDeck]] { bottomUp = {}, remove = {}, add = {} }

    ---@param eventNumber number
    ---@return boolean
    local function isRemoved(eventNumber)
        return not TableUtil.contains(savedDeckInfo.bottomUp, eventNumber)
                and Event.find(eventNumber, availableEventsDeck) == nil
    end

    for _, card in pairs(activeEventsDeck.getObjects()) do
        local eventNumber = Event.getNumber(card)
        if not TableUtil.contains(savedDeckInfo.bottomUp, eventNumber) then
            table.insert(savedDeckInfo.bottomUp, eventNumber)
        end

        if eventNumber > StartingEvents and not TableUtil.contains(savedDeckInfo.add, eventNumber) then
            table.insert(savedDeckInfo.add, eventNumber)
        end
    end

    for eventNumber = 1, info.count do
        if isRemoved(eventNumber) then
            table.insert(savedDeckInfo.remove, eventNumber)
            if eventNumber > StartingEvents then
                table.insert(savedDeckInfo.add, eventNumber)
            end
        end
    end

    local expansionBox = Component.forgottenCirclesBox(false)
    if expansionBox ~= nil then
        local expansionEventsTaken = Search.inContainer(--[[---@not nil]] expansionBox, { name = info.name }) == nil
        if expansionEventsTaken then
            for eventNumber = ExpansionStartingEvent, ExpansionStartingEvent + info.expansionCount - 1 do
                if isRemoved(eventNumber) then
                    table.insert(savedDeckInfo.remove, eventNumber)
                    table.insert(savedDeckInfo.add, eventNumber)
                end
            end
        end
    end

    table.sort(savedDeckInfo.add)
    table.sort(savedDeckInfo.remove)

    return savedDeckInfo
end

---@param card tts__ObjectState
---@return number
function Event.getNumber(card)
    local numberFromName = tonumber(Object.name(card))
    if numberFromName then
        return --[[---@not nil]] numberFromName
    end

    local cardId = Object.data(card).CardID
    local cardIndex = --[[---@not nil]] tonumber(tostring(cardId):sub(-2, -1))
    if cardIndex >= 22 then
        return cardIndex + 60
    end
    return cardIndex + 82
end

return Event
