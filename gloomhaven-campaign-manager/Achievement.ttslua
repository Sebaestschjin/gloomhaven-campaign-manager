local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Task = require("gloomhaven-campaign-manager.Task")

local Achievement = {}

local function setupHandler()
    Task.registerLoad(Achievement.loadAll, Task.Event.Loaded.Start)

    Task.registerSave(Achievement.saveAll, Task.Event.Saved.Start)
end

---@param savefile gh_Savefile
function Achievement.loadAll(savefile)
    local achievements = savefile.global.achievements
    ---@type boolean[]
    local readyGroups = { true }

    for i = 1, 5 do
        table.insert(readyGroups, false)
        local achievementGroup = {}
        for achievementName, count in pairs(achievements) do
            if count >= i then
                table.insert(achievementGroup, achievementName)
            end
        end

        if TableUtil.isNotEmpty(achievementGroup) then
            Wait.condition(function() Achievement.loadGroup(i, achievementGroup, readyGroups) end,
                    function() return readyGroups[i] end)
        end
    end
end

---@param group number
---@param achievementGroup string[]
---@param readyGroups boolean[]
function Achievement.loadGroup(group, achievementGroup, readyGroups)
    local globalAchievementsBag = Component.achievementsBag()

    globalAchievementsBag.takeObject({
        guid = Component.achievementBoardGuid(),
        callback_function = function(obj)
            for _, achievement in pairs(achievementGroup) do
                local index = --[[---@not nil]] Achievement.findIndex(obj, achievement)
                obj.call('clicked', index)
            end
            readyGroups[group + 1] = true
        end
    })
end

---@param savefile gh_Savefile
function Achievement.saveAll(savefile)
    local achievementBoardGuid = Component.achievementBoardGuid()
    local achievementBoard = getObjectFromGUID(achievementBoardGuid)
    if achievementBoard ~= nil then
        Achievement.doSave(savefile, --[[---@not nil]] achievementBoard)
    else
        local bag = Component.achievementsBag()
        bag.takeObject({
            guid = achievementBoardGuid,
            position = Component.achievementBoardPosition(),
            rotation = { 0, 180, 0 },
            callback_function = function(obj)
                Achievement.doSave(savefile, obj)
                bag.putObject(obj)
            end
        })
    end
end

---@param savefile gh_Savefile
---@param achievementBoard tts__Object
function Achievement.doSave(savefile, achievementBoard)
    local achievementInfo = --[[---@type fantasySetup_Achievement_Info[] ]] achievementBoard.getTable("flags")

    local result = --[[---@type gh_Save_Achievements ]] {}
    for _, achievement in pairs(achievementInfo) do
        local maxIndex = 0
        for i, guid in pairs(achievement.guids) do
            if getObjectFromGUID(guid) ~= nil then
                maxIndex = i
            end
        end
        if maxIndex > 0 then
            result[achievement.name] = maxIndex
        end
    end
    (--[[---@not nil]] savefile.global).achievements = result
    Task.completeSave(Task.Event.Saved.Achievements, savefile)
end

---@param achievementBoard tts__Object
---@param achievement string
---@return nil | number
function Achievement.findIndex(achievementBoard, achievement)
    local achievementInfo = --[[---@type fantasySetup_Achievement_Info[] ]] achievementBoard.getTable("flags")

    for i, flag in pairs(achievementInfo) do
        if flag.name == achievement then
            return i
        end
    end
    return nil
end

setupHandler()

return Achievement
