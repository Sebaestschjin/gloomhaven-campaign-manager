local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local Utils = require("sebaestschjin-tts.Utils")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local Component = require("gloomhaven-campaign-manager.Component")
local Prosperity = require("gloomhaven-campaign-manager.Prosperity")
local Task = require("gloomhaven-campaign-manager.Task")

local Shop = {}

local function setupHandler()
    Task.registerLoad(Shop.load, Task.Event.Loaded.Prosperity)
end

---@param savefile gh_Savefile
function Shop.load(savefile)
    Logger.info("Loading shop from prosperity")

    local shopDeck = Component.shopDeck()
    shopDeck.setRotation({ 0, 90, 180 })

    for i = 1, Prosperity.getLevel() do
        local itemDeck = Component.itemDeck(i)
        shopDeck.putObject(--[[---@not nil]] itemDeck.unwrap())
    end

    Task.completeLoad(Task.Event.Loaded.Shop, savefile)
end

---@param savefile gh_Savefile
function Shop.save(savefile)
    local shopDeck = Component.shopDeck()
    if shopDeck.isEmpty() then
        Component.cityMat().call("layOut", 0)
        Wait.time(function()
            Shop.doSave(savefile)
        end, 1)
    else
        Shop.doSave(savefile)
    end
end

---@param savefile gh_Savefile
function Shop.doSave(savefile)
    local shopDeck = Component.shopDeck()

    if shopDeck.isEmpty() then
        Logger.warn("Can't find shop deck, even after trying to recalling it."
                .. " This means unlocked items can't be saved.")
    else
        local items = savefile.unlocked.items
        Shop.saveFromObjects(shopDeck.getObjects(), items)
        for player = 1, Component.playerCount() do
            Shop.saveFromObjects(Component.playerObjects(player), items)
        end

        table.sort(items)
    end

    Task.completeSave(Task.Event.Saved.Items, savefile)
end

---@param objects seb_Object_Array
---@param items string[]
function Shop.saveFromObjects(objects, items)
    for _, item in pairs(--[[---@type tts__Object[] ]] objects) do
        if Component.isRewardItemCard(item, Prosperity.getLevel()) then
            table.insert(items, Object.name(item))
        elseif Object.isContainer(item) then
            Shop.saveFromObjects(Object.objects(--[[---@type seb_Object_Container]] item), items)
        end
    end
end

---@overload fun(name: string, toPosition: tts__VectorShape, toRotation: tts__VectorShape): boolean
---@overload fun(name: string, toPosition: tts__VectorShape): boolean
---@param name string
---@param toPosition tts__VectorShape
---@param toRotation tts__VectorShape
---@param startAt number
---@return boolean
function Shop.takeItem(name, toPosition, toRotation, startAt)
    startAt = startAt or 1
    local cityMat = Component.cityMat()

    for i = startAt, 14 do
        local deckPosition = --[[---@not nil]] Utils.getSnapPosition(cityMat, i)
        local deck = WrappedDeck(deckPosition)
        if not deck.isEmpty() then
            local item, index = Search.inContainedObjects(deck, { name = name })
            if item then
                deck.takeObject({
                    index = index,
                    smooth = false,
                    position = toPosition,
                    rotation = toRotation,
                })
                return true
            end
        end
    end

    return false
end

---@overload fun(name: string, callback: tts__ObjectCallbackFunction): boolean
---@param name string
---@param callback tts__ObjectCallbackFunction
---@param startAt number
---@return boolean
function Shop.takeItem2(name, callback, startAt)
    local cityMat = Component.cityMat()
    startAt = startAt or 1

    for i = startAt, 14 do
        local deckPosition = --[[---@not nil]] Utils.getSnapPosition(cityMat, i)
        local deck = WrappedDeck(deckPosition)
        if not deck.isEmpty() then
            local item, index = Search.inContainedObjects(deck, { name = name })
            if item then
                deck.takeObject({
                    index = index,
                    smooth = false,
                    position = Component.safePosition(),
                    callback_function = callback,
                })
                return true
            end
        end
    end

    return false
end

---@param name string
---@param callback tts__ObjectCallbackFunction
---@return boolean
function Shop.takeRewardItem(name, callback)
    return Shop.takeItem2(name, callback, 2)
end

setupHandler()

return Shop
