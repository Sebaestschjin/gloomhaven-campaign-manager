local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local ObjectState = require("sebaestschjin-tts.ObjectState")

local Chain = require("sebaestschjin-tts.Chain")
local Search = require("sebaestschjin-tts.Search")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Options = require("gloomhaven-campaign-manager.Options")
local Task = require("gloomhaven-campaign-manager.Task")

---
--- Handles everything about the Forgotten Circles expansion
---
local Expansion = {}

local function setupHandler()
    Task.registerLoad(Expansion.unpack, Task.Event.Placed.LockedCharacters)
    Task.registerLoad(Expansion.mayLoadBattleGoals, Task.Event.Loaded.Options)
end

local StartEvent = 82
local NewItemsDeck = "Forgotten Circles Items"
local RevisedAbilityCards = "Revised Cards"

--- Unpacks the expansion box.
---@param savefile gh_Savefile
function Expansion.unpack(savefile)
    Logger.info("Unpacking Forgotten Circles expansion")

    local chain = Chain("Unpack Expansion")

    chain.add(function(c) Expansion.unlockExpansionClass(c, "Diviner") end)

    local customClasses = TableUtil.filter(Game.Classes, function(c) return c.isCustomClass end)
    for _, customClass in pairs(customClasses) do
        chain.add(function(c) Expansion.unlockCustomClass(c, customClass) end)
    end

    for _, info in pairs(Component.EventDecks) do
        local targetDeck = Component.eventDeck(info)
        chain.add(function(c) Expansion.unpackEvents(c, targetDeck, info.name) end)
    end

    chain.add(Expansion.unpackItems)
    chain.add(Expansion.reviseAbilityCards)
    chain.add(function() Task.completeLoad(Task.Event.Loaded.Expansion, savefile) end)

    chain.proceed()
end

---@param chain seb_Chain
---@param className string
function Expansion.unlockExpansionClass(chain, className)
    Component.forgottenCirclesBox().takeObject({
        guid = Game.class(className).boxGuid,
        smooth = false,
        callback_function = function(obj)
            Component.lockedClasses().putObject(obj)
            chain.proceed()
        end
    })
end

---@param chain seb_Chain
---@param class gh_Game_Class
function Expansion.unlockCustomClass(chain, class)
    local customClassBox = getObjectFromGUID(class.boxGuid)
    if customClassBox then
        Component.lockedClasses().putObject(--[[---@not nil]] customClassBox)
    end
    chain.proceed()
end

--- Unpacks the additional event cards.
---@param chain seb_Chain
---@param targetDeck seb_WrappedDeck
---@param deckName string
function Expansion.unpackEvents(chain, targetDeck, deckName)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newEvents = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = deckName })

    forgottenCirclesBox.takeObject({
        index = newEvents.index,
        position = Component.safePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj) Expansion.unpackEventDeck(chain, --[[---@type tts__Deck]] obj, targetDeck) end,
    })
end

---@param chain seb_Chain
---@param expansionDeck tts__Deck @The event deck to unpack
---@param targetDeck seb_WrappedDeck @The event deck where the new events will be placed
function Expansion.unpackEventDeck(chain, expansionDeck, targetDeck)
    local deckData = expansionDeck.getData()

    local totalSize = TableUtil.length(deckData.ContainedObjects)
    for index, event in ipairs(deckData.ContainedObjects) do
        event.Nickname = tostring(StartEvent + totalSize - index)
    end

    Object.respawn(deckData, function(obj)
        targetDeck.putObject(--[[---@type tts__Deck]] obj)
        chain.proceed()
    end)
end

---@param chain seb_Chain
---@return boolean
function Expansion.unpackItems(chain)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newItems = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = NewItemsDeck })
    local targetDeck = Component.rewardItemsDeck()

    forgottenCirclesBox.takeObject({
        guid = newItems.guid,
        position = Component.safePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj)
            targetDeck.putObject(--[[---@type tts__Card]] obj)
            Wait.frames(chain.proceed, 1)
        end
    })

    return false
end

---@param chain seb_Chain
function Expansion.reviseAbilityCards(chain)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local revisedCardDeck = --[[---@type tts__DeckState]] Search.inContainedObjects(forgottenCirclesBox, { name = RevisedAbilityCards })
    local revisedCards = revisedCardDeck.ContainedObjects
    local lockedClasses = Component.lockedClasses().getData()

    ---@param abilityCard tts__ObjectState
    ---@return nil | tts__ObjectState
    local function getRevisedCard(abilityCard)
        for _, revised in ipairs(revisedCards) do
            if (abilityCard.Description or ""):find(revised.Description or "") ~= nil
                    and (revised.Nickname == abilityCard.Nickname
                    or revised.Nickname == "Feeling Swoop (75)" and abilityCard.Nickname == "Felling Swoop (75)") -- Stupid Typos...
            then
                return revised
            end
        end
    end

    for _, classBox in ipairs(lockedClasses.ContainedObjects) do
        local characterBox = --[[---@type tts__BagState]] (--[[---@type tts__BagState]] classBox).ContainedObjects[1]
        for _, contained in ipairs(characterBox.ContainedObjects) do
            if Component.isAbilityDeck(contained) then
                local abilityDeck = (--[[---@type tts__DeckState]] contained).ContainedObjects
                for k, abilityCard in ipairs(abilityDeck) do
                    local revisedCard = getRevisedCard(abilityCard)
                    if revisedCard then
                        abilityDeck[k] = --[[---@not nil]] revisedCard
                    end
                end
            end
        end
    end

    Object.respawn(lockedClasses, chain.proceed)
end

function Expansion.mayLoadBattleGoals()
    if Options.loadExtendedBattleGoals then
        local deck = ObjectState.deckCustom({
            deck = {
                image = "http://cloud-3.steamusercontent.com/ugc/958613321553657772/8B55AD5F5A77B18577507903A07C5A6563969802/",
                imageBack = "http://cloud-3.steamusercontent.com/ugc/83721958666016106/12EAB751A1FEE2AA1CDB21424883752EB181C174/",
                width = 10,
                height = 6,
                number = 54,
                backIsHidden = true,
            }
        })
        spawnObjectData({
            data = deck,
            callback_function = function(obj)
                Component.battleGoalsDeck().putObject(--[[---@type tts__Deck]] obj)
            end,
        })
    end
end

setupHandler()

return Expansion
