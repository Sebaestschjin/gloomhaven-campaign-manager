local EventManager = require("ge_tts.EventManager")
local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local ObjectState = require("sebaestschjin-tts.ObjectState")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")

local Enhancement = {}

---@param savefile gh_Savefile
function Enhancement.setup(savefile)
    EventManager.addHandler(EventType.Loaded.Class.Unlocked, function(className)
        Enhancement.mayLoadForClass(savefile, className)
    end)
end

---@type table<string, URL>
local Decals = {
    ["Air"] = "http://cloud-3.steamusercontent.com/ugc/938309024726768884/CC8308C7D7DD6185F3EFA99F452C83101E1E95E3/",
    ["Earth"] = "http://cloud-3.steamusercontent.com/ugc/938309024726773039/E83D1E9F06938B3B5355F0A6A49D98B78B1F2594/",
    ["Fire"] = "http://cloud-3.steamusercontent.com/ugc/938309024726770166/CD369CF7C22FAD932A71C65BA811AE137234270D/",
    ["Frost"] = "http://cloud-3.steamusercontent.com/ugc/938309024726771564/3C69B7D1E66E8FC022B2BD77CC427E8AEC5D9331/",
    ["Dark"] = "http://cloud-3.steamusercontent.com/ugc/938309024726982499/9C14793623433565A9D6E5B3C608C1F6FBB84C76/",
    ["Light"] = "http://cloud-3.steamusercontent.com/ugc/938309024726774294/5BBAC718ED55E90563D2B24848DE3ACAEBD76FE9/",
    ["Any Element"] = "http://cloud-3.steamusercontent.com/ugc/938309024726984504/2F962A64E2A9888C90856D9C150EF81089745137/",
    ["Curse"] = "http://cloud-3.steamusercontent.com/ugc/938309024726987796/ABB2E197E22015077D39A378AA9A9E7A317C69FE/",
    ["Bless"] = "http://cloud-3.steamusercontent.com/ugc/938309024726986639/FDF514FDA20826ACA054BE5CBA579AE6FB25A263/",
    ["Disarm"] = "http://cloud-3.steamusercontent.com/ugc/938309024726989091/DB993A58BC37C60B64A2F2CCDAED888F6176BC43/",
    ["Immobilize"] = "http://cloud-3.steamusercontent.com/ugc/938309024726990928/14B27BE1DC8F226D05FDB7D7D5D420FFCA6919B0/",
    ["Muddle"] = "http://cloud-3.steamusercontent.com/ugc/938309024726993395/820BE84906894B87F0C0DAC77C3BFBCD9B1AD504/",
    ["Poison"] = "http://cloud-3.steamusercontent.com/ugc/938309024726994202/6EAECD4A8A6A56F42834D486A21219002B883C53/",
    ["Regenerate"] = "http://cloud-3.steamusercontent.com/ugc/791986676667649885/92F7F934D298524F6F72997095DDBA073D9A15BF/",
    ["Strengthen"] = "http://cloud-3.steamusercontent.com/ugc/938309024726995467/72FC8E8918F788646DBD0C571FDAB214D7A36445/",
    ["Stun"] = "http://cloud-3.steamusercontent.com/ugc/83721958671678940/616CC0951CB17024448D3CBC7E5CA9D3A05D7555/",
    ["Wound"] = "http://cloud-3.steamusercontent.com/ugc/938309024726992099/9B90EEDC5B68B4FFD04C0037008F9C96BA603C24/",
    ["Plus 1"] = "http://cloud-3.steamusercontent.com/ugc/938309024726761532/C3BB327E15466B74ED256A0BD7B66C20A8825861/",
    ["Area"] = "http://cloud-3.steamusercontent.com/ugc/938309024726997997/041C0C738331AA8B4D8281BE8E9BE2C2963D823D/",
    ["Jump"] = "http://cloud-3.steamusercontent.com/ugc/938309024726767406/7C34D7EA30D5E6FF90BBA88A767ACB98467FC557/"
}
Decals["Ice"] = Decals["Frost"] -- makes more sense, since the element is also called Ice

---@type number
local MaxDistance = 0.1
---@type number
local DecalYCoordinate = 0.36
---@type tts__VectorShape
local DecalRotation = { 90, 180, 0 }
---@type tts__VectorShape
local DecalScale = { 0.16, 0.16, 3.07 }

---@param savefile gh_Savefile
---@param className string
function Enhancement.mayLoadForClass(savefile, className)
    local classEnhancements = savefile.enhancements[className]
    if classEnhancements then
        Enhancement.loadClass(className, classEnhancements, Enhancement.finishLoadClass)
        return
    end

    Enhancement.finishLoadClass(className)
end

---@overload fun(className: string, abilities: gh_Save_EnhancedClass): void
---@param className string
---@param abilities gh_Save_EnhancedClass
---@param callback fun(className: string): void
function Enhancement.loadClass(className, abilities, callback)
    Logger.info("Loading enhancements for class %s", className)

    local classBox = (--[[---@not nil]] Component.classBox(className)).getData()
    local characterBox = Component.characterBox(classBox)

    for _, contained in pairs(characterBox.ContainedObjects) do
        if Component.isAbilityDeck(contained) then
            Enhancement.applyEnhancementsOnAbilityDeck(--[[---@type tts__DeckState]]contained, className, abilities)
        end
    end

    Object.respawn(classBox, function()
        Logger.info("Enhancements for class %s loaded", className)
        if callback then
            callback(className)
        end
    end)
end

---@param className string
function Enhancement.finishLoadClass(className)
    EventManager.triggerEvent(EventType.Loaded.Class.Enhanced, className)
end

---@param deck tts__DeckState
---@param className string
---@param abilities gh_Save_EnhancedClass
function Enhancement.applyEnhancementsOnAbilityDeck(deck, className, abilities)
    for abilityName, ability in pairs(abilities) do
        for _, abilityCard in pairs(deck.ContainedObjects) do
            if Object.name(abilityCard):find(abilityName) then
                Enhancement.applyEnhancementsOnCard(abilityCard, className, abilityName, ability)
            end
        end
    end
end

---@param abilityCard tts__ObjectState
---@param className string
---@param abilityName string
---@param ability gh_Save_Enhanced_Ability
function Enhancement.applyEnhancementsOnCard(abilityCard, className, abilityName, ability)
    ---@param object tts__ObjectState
    ---@param position tts__Vector
    ---@return nil | (tts__Object_Decal, number)
    local function findExistingDecalAt(object, position)
        for i, decal in ipairs(Object.decals(object)) do
            if decal.position:equals(position) then
                return decal, i
            end
        end
    end

    local enhancementsInfo = (--[[---@not nil]] Game.ability(className, abilityName)).enhancements
    for enhancementPosition, enhancement in pairs(ability) do
        local position2d = enhancementsInfo[--[[---@not nil]] tonumber(enhancementPosition)]
        local decal = {
            name = "Enhancement " .. enhancement,
            url = Decals[enhancement],
            position = { position2d[1], DecalYCoordinate, position2d[2] },
        }
        local existingDecal, index = findExistingDecalAt(abilityCard, Vector(decal.position))

        if existingDecal ~= nil then
            if (--[[---@not nil]] existingDecal).name ~= decal.name then
                Logger.warn("The ability '%s' of class %s already has an '%s' at position %d. This will now be overwritten with '%s'!",
                        abilityName, className, (--[[---@not nil]] existingDecal).name, enhancementPosition, decal.name)
                local attachedDecals = --[[---@not nil]] abilityCard.AttachedDecals
                attachedDecals[index].CustomDecal.ImageURL = decal.url
                attachedDecals[index].CustomDecal.Name = decal.name
            end
        else
            ObjectState.addDecal(abilityCard, {
                name = decal.name,
                url = decal.url,
                position = decal.position,
                rotation = DecalRotation,
                scale = DecalScale,
            })
        end
    end
end

---@param savefile gh_Savefile
function Enhancement.saveAll(savefile)
    local enhancements = savefile.enhancements

    for player = 1, Component.playerCount() do
        Enhancement.saveFromZone(player, enhancements)
    end
    Enhancement.saveFromPackedCharacters(enhancements)
    Enhancement.saveFromCharacterBoxes(enhancements)
end

---@param player number
---@param enhancements gh_Save_Enhancements
function Enhancement.saveFromZone(player, enhancements)
    local className = Component.playerClass(player)
    if not className then
        return
    end
    Enhancement.saveFromContainer(Component.playerZone(player), --[[---@not nil]] className, enhancements)
end

---@param enhancements gh_Save_Enhancements
function Enhancement.saveFromPackedCharacters(enhancements)
    for _, inactiveCharacter in pairs(Component.packedCharacters()) do
        local className = inactiveCharacter.getName()
        Enhancement.saveFromContainer(inactiveCharacter.getData(), className, enhancements)
    end
end

---@param enhancements gh_Save_Enhancements
function Enhancement.saveFromCharacterBoxes(enhancements)
    for className, _ in pairs(Game.Classes) do
        local classBox = Component.classBox(className)
        if classBox then
            local characterBox = Component.characterBox(--[[---@not nil]] classBox)
            Enhancement.saveFromContainer(characterBox, className, enhancements)
        end
    end
end

---@param container seb_Object_Container
---@param className string
---@param enhancements gh_Save_Enhancements
function Enhancement.saveFromContainer(container, className, enhancements)
    for _, object in ipairs(--[[---@type seb_Object[] ]] Object.objects(container)) do
        local abilityName = Component.getAbilityNameForClass(object, className)
        if abilityName ~= nil and TableUtil.isNotEmpty(Object.decals(object)) then
            Enhancement.saveForCard(object, className, --[[---@not nil]] abilityName, enhancements)
        elseif Object.isContainer(object) then
            Enhancement.saveFromContainer(--[[---@type seb_Object_Container]] object, className, enhancements)
        end
    end
end

---@param card seb_Object
---@param className string
---@param abilityName string
---@param enhancements gh_Save_Enhancements
function Enhancement.saveForCard(card, className, abilityName, enhancements)
    Logger.verbose("Saving enhancements for " .. Object.name(card))
    local enhancementInfo = (--[[---@not nil]] Game.ability(className, abilityName)).enhancements

    for _, decal in ipairs(Object.decals(card)) do
        local enhancementName = Enhancement.getName(decal.name)
        if enhancementName then
            local nearestIndex, distance = Enhancement.findNearestIndex(decal.position, enhancementInfo)

            if Enhancement.saveEnhancement(enhancements, className, abilityName, nearestIndex, --[[---@not nil]] enhancementName)
            then
                if distance > MaxDistance then
                    Logger.warn("Enhancement for ability " .. className .. "\n"
                            .. "The distance to any known enhancement position for this ability is bigger"
                            .. " than expected (" .. distance .. "). This might mean, that the known"
                            .. " information is outdated (e.g. a newer printing of the card exists),"
                            .. " the card shouldn't have enhancements or that the decal was added"
                            .. " rather sloppy. Please verify that the enhancement loads correctly.")
                end
            end
        else
            Logger.warn("The ability '%s' (%s) has an unknown enhancement named '%s'."
                    .. " This one will be ignored. Did you place the correct sticker?", abilityName, className, decal.name)
        end
    end
end

---@param decalName string
---@return nil | string
function Enhancement.getName(decalName)
    local baseName = StringUtil.replace(decalName, "Enhancement ")
    if baseName:lower() == "aoe hex" then
        baseName = "Area"
    end

    if not Decals[baseName] then
        return nil
    end

    return baseName
end

---@param enhancements gh_Save_Enhancements
---@param className string
---@param abilityName string
---@param position number
---@param enhancementName string
---@return boolean
function Enhancement.saveEnhancement(enhancements, className, abilityName, position, enhancementName)
    ---@type gh_Save_EnhancedClass
    local classEnhancements = enhancements[className]
    if not classEnhancements then
        classEnhancements = {}
        enhancements[className] = classEnhancements
    end

    ---@type gh_Save_Enhanced_Ability
    local abilityEnhancement = classEnhancements[abilityName]
    if not abilityEnhancement then
        abilityEnhancement = {}
        classEnhancements[abilityName] = abilityEnhancement
    end

    local positionEnhancement = abilityEnhancement[tostring(position)]
    if positionEnhancement then
        return false
    end

    abilityEnhancement[tostring(position)] = enhancementName
    return true
end

---@param decalPosition tts__Vector
---@param enhancementInfo gh_Game_Ability_Enhancement[]
---@return (number, number)
function Enhancement.findNearestIndex(decalPosition, enhancementInfo)
    local nearestDistance = 42
    local nearestIndex = 1
    decalPosition:setAt("y", 0)
    for i, enhancement in ipairs(enhancementInfo) do
        local x, z = enhancement[1], enhancement[2]
        local distance = decalPosition:distance(Vector(x, 0, z))
        if distance < nearestDistance then
            nearestDistance = distance
            nearestIndex = i
        end
    end

    return nearestIndex, nearestDistance
end

return Enhancement
