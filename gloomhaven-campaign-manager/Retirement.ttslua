local EventManager = require("ge_tts.EventManager")
local Logger = require("sebaestschjin-tts.Logger")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")
local Quest = require("gloomhaven-campaign-manager.Quest")
local Task = require("gloomhaven-campaign-manager.Task")

local Retirement = {}

local function setupHandlers()
    Task.registerSave(Retirement.saveAll, Task.Event.Saved.Party)
end

---@param savefile gh_Savefile
function Retirement.setup(savefile)
    EventManager.addHandler(EventType.Loaded.Start, function() Retirement.unpackRetirementSheet(savefile.retired) end)
    EventManager.addHandler(EventType.Placed.RetirementSheet, function() Retirement.startLoading(savefile.retired) end)
end

local RetirementSheetColumns = 5

---@param retired gh_Save_Retired[]
function Retirement.unpackRetirementSheet(retired)
    if TableUtil.isNotEmpty(retired) then
        Component.placeRetirementSheet()
    end
end

---@param retired gh_Save_Retired[]
function Retirement.startLoading(retired)
    Logger.info("Loading retired characters")

    local retirementSheet = --[[---@not nil]] Component.retirementSheet()

    for i, retirement in ipairs(retired) do
        local row = i - 1
        local offset = row * RetirementSheetColumns

        retirementSheet.editInput({ index = offset + 0, value = retirement.player })
        retirementSheet.editInput({ index = offset + 1, value = retirement.character })
        retirementSheet.editInput({ index = offset + 2, value = retirement.class })
        retirementSheet.editInput({ index = offset + 3, value = retirement.level })
        retirementSheet.editInput({ index = offset + 4, value = retirement.perks })

        if retirement.quest then
            Quest.take(retirement.quest, function(card)
                Component.discardQuest(--[[---@type tts__Card]] card)
            end)
        end
    end

    retirementSheet.call("forceSave", {})
end

---@param savefile gh_Savefile
function Retirement.saveAll(savefile)
    Retirement.saveRetirementSheet(savefile.retired)
    Retirement.saveCompletedQuests(savefile)
end

---@param retired gh_Save_Retired[]
function Retirement.saveRetirementSheet(retired)
    local retirementSheet = Component.retirementSheet()
    if not retirementSheet then
        return
    end

    local retiredCharacter = --[[---@type gh_Save_Retired]] {}
    for i, input in pairs((--[[---@not nil]] retirementSheet).getInputs()) do
        local column = (i - 1) % RetirementSheetColumns
        if column == 0 then
            if TableUtil.isNotEmpty(retiredCharacter) then
                table.insert(retired, retiredCharacter)
            end
            retiredCharacter = --[[---@type gh_Save_Retired]] {}
        end

        if input.value ~= "" then
            if column == 0 then
                retiredCharacter.player = input.value
            elseif column == 1 then
                retiredCharacter.character = input.value
            elseif column == 2 then
                retiredCharacter.class = input.value
            elseif column == 3 then
                retiredCharacter.level = --[[---@not nil]] tonumber(input.value)
            elseif column == 4 then
                retiredCharacter.perks = --[[---@not nil]] tonumber(input.value)
            end
        end
    end
    if TableUtil.isNotEmpty(retiredCharacter) then
        table.insert(retired, retiredCharacter)
    end
end

---@param savefile gh_Savefile
function Retirement.saveCompletedQuests(savefile)
    local completedQuests = --[[---@type table<string, number> ]] {}
    for name, _ in pairs(Game.Quests) do
        completedQuests[name] = 1
    end

    local questDeck = Component.questDeck()
    for _, quest in pairs(questDeck.getObjects()) do
        local questInfo = --[[---@not nil]] Component.getQuestInfo(quest)
        completedQuests[questInfo.name] = nil
    end

    for _, character in pairs(savefile.party.characters) do
        if character.quest then
            local playerQuest = Game.quest(character.quest)
            completedQuests[playerQuest.name] = nil
        end
    end

    local i = 1
    for completed, _ in pairs(completedQuests) do
        if not savefile.retired[i] then
            savefile.retired[i] = --[[---@type gh_Save_Retired]] {}
        end
        savefile.retired[i].quest = completed
        i = i + 1
    end
end

setupHandlers()

return Retirement
