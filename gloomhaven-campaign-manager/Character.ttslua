local Chain = require("sebaestschjin-tts.Chain")
local Constant = require("sebaestschjin-tts.Constant")
local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local Component = require("gloomhaven-campaign-manager.Component")
local Enhancement = require("gloomhaven-campaign-manager.Enhancement")
local Game = require("gloomhaven-campaign-manager.Game")
local Quest = require("gloomhaven-campaign-manager.Quest")
local Shop = require("gloomhaven-campaign-manager.Shop")
local Task = require("gloomhaven-campaign-manager.Task")

local Character = {}

local function setupHandler()
    Task.registerPerPlayer(Character.loadFigureHp, Task.Event.Character.Figurine)
    Task.registerPerPlayer(Character.loadHealthToken, Task.Event.Character.HpTrack)
    Task.registerPerPlayer(Character.loadItems, Task.Event.Character.Mat)
    Task.registerPerPlayer(Character.loadPerks, { Task.Event.Character.AttackModifiers, Task.Event.Character.AttackModifiersPlayer })
end

local AbilityDefaultDistance = 5
local AbilityMaxDistance = AbilityDefaultDistance + 2

---@param player number
---@param character gh_Save_Character
function Character.load(player, character)
    Logger.info("Loading Character %s at %d", character.class, player)

    Component.loadPlayer(player, function() Character.unpackCharacterBox(player, character) end)
end

---@param character gh_Save_Character
function Character.loadInactive(character)
    local callback = function(box) Character.fillInactive(character, box) end
    Component.placeInactiveCharacter(character, callback)
end

---@param character gh_Save_Character
---@param characterBox tts__Bag
function Character.fillInactive(character, characterBox)
    local putIntoBox = function(o) characterBox.putObject(o) end

    if character.quest then
        Quest.take(character.quest, putIntoBox)
    end

    for _, items in pairs(character.items) do
        for _, itemName in ipairs(items) do
            if not Shop.takeItem2(itemName, putIntoBox) then
                Logger.error("The item '%s' does not exist. Won't load item.", itemName)
            end
        end
    end
end

---@param player number
---@param character gh_Save_Character
function Character.unpackCharacterBox(player, character)
    local classBox = --[[---@not nil]] Component.classBox(character.class)
    if not classBox then
        Logger.error("Did not find the class box for class %s! Is it part of the unlocked classes?", character.class)
        return
    end

    ---@param object tts__ObjectState
    ---@param component gh_PlayerComponent
    ---@return boolean
    local function matchesComponent(object, component)
        if component.name then
            return object.Nickname ~= nil and (--[[---@not nil]] object.Nickname):find(--[[---@not nil]] component.name) ~= nil
        elseif component.class then
            return object.Nickname == character.class
        end

        return false
    end

    local abilityDecksPlaced = 0
    ---@param targetDeck seb_WrappedDeck
    ---@param contained tts__ObjectState
    local function placeAbilityDeck(targetDeck, contained)
        spawnObjectData({
            data = contained,
            position = Component.safePosition(),
            rotation = { 0, 180, 0 },
            callback_function = function(obj)
                abilityDecksPlaced = abilityDecksPlaced + 1
                targetDeck.putObject(--[[---@type tts__Deck]] obj)
                targetDeck.setName("Advanced Abilities")
                if abilityDecksPlaced == 2 then
                    Character.loadAbilities(targetDeck, player, character)
                end
            end
        })
    end

    local characterBoxData = --[[---@type tts__BagState]] classBox.getData().ContainedObjects[1]
    local containedObjects = {}
    local classInfo = Game.class(character.class)
    local extras = classInfo.extra or --[[---@type gh_Game_Class_Extra[] ]] {}
    local targetAbilityDeck = WrappedDeck(Component.abilityDeckPosition(player))

    for i = #characterBoxData.ContainedObjects, 1, -1 do
        local contained = characterBoxData.ContainedObjects[i]
        if Component.isAbilityDeck(contained) then
            placeAbilityDeck(targetAbilityDeck, contained)
        elseif Component.isPlayerMat(contained) then
            Character.placePlayerMat(contained, player, character)
        elseif Component.isCharacterSheet(contained) then
            Character.placeCharacterSheet(contained, player, character)
        else
            local taken = false
            for _, component in pairs(Component.PlayerComponent) do
                if matchesComponent(contained, component) then
                    Component.placePlayerComponent(player, character, contained, component)
                    taken = true
                    break
                end
            end

            for _, extra in ipairs(extras) do
                if contained.Nickname == extra.name then
                    Component.placeExtraPlayerComponent(player, character, contained, extra)
                    taken = true
                    break
                end
            end

            if not taken then
                table.insert(containedObjects, contained)
            end
        end
    end
    for _, component in pairs(Component.ExtraPlayerComponent) do
        Component.placeAdditionalPlayerComponents(player, character, component)
    end

    characterBoxData.ContainedObjects = containedObjects
    Component.placeCharacterBox(player, characterBoxData)
    Character.loadQuest(player, character)
end

---@param player number
function Character.packCharacterBox(player)
    if not Component.characterSheet(player) then
        local playerMat = Component.playerMat(player)
        if playerMat then
            playerMat.destruct()
        end
        return
    end

    ---@return gh_Save_Character
    local function storeCharacter()
        local characters = --[[---@type gh_Save_Characters]] {}
        Character.save(player, characters)
        return characters[tostring(player)]
    end

    ---@param className string
    local function storeEnhancements(className)
        local enhancements = --[[---@type gh_Save_Enhancements]] {}
        Enhancement.saveFromZone(player, enhancements)
        local classEnhancements = enhancements[className]
        if TableUtil.isNotEmpty(classEnhancements) then
            Enhancement.loadClass(className, classEnhancements)
        end
    end

    --- Find all components within objects that are limited and should be placed into an inactive player box.
    ---@param limitedComponents tts__ObjectState[]
    ---@param objects seb_Object_Array
    local function findLimitedComponents(limitedComponents, objects)
        for _, obj in ipairs(--[[---@type seb_Object[] ]] objects) do
            if Component.isPersonalQuestCard(obj) or Component.isItemCard(obj) then
                table.insert(limitedComponents, Object.data(obj))
            elseif Object.isContainer(obj) then
                findLimitedComponents(limitedComponents, Object.objects(--[[---@type seb_Object_Container]] obj))
            end
        end
    end

    ---@param playerObjects tts__Object[]
    local function removeObjects(playerObjects)
        for _, obj in ipairs(playerObjects) do
            obj.destruct()
        end
    end

    local function inputLimitedObjects(characterBox)
        local limitedComponents = {}
        local playerObjects = Component.playerObjects(player)
        findLimitedComponents(limitedComponents, playerObjects)

        local characterBoxData = characterBox.getData()
        characterBoxData.ContainedObjects = limitedComponents

        Object.respawn(characterBoxData)
        removeObjects(playerObjects)
    end

    local character = storeCharacter()
    storeEnhancements(character.class)

    Component.placeInactiveCharacter(character, inputLimitedObjects)
end

---@param boxGuid GUID
---@param character gh_Save_Character
function Character.unpackInactiveCharacterBox(boxGuid, character)
    local inactiveCharacterBox = --[[---@type tts__Bag]] getObjectFromGUID(boxGuid)

    for player = 1, Component.playerCount() do
        if Component.isPlayerObject(player, inactiveCharacterBox) then
            local unpackChain = Chain()

            ---@param object tts__ObjectState
            ---@param deckSupplier fun(): seb_WrappedDeck
            local function putObjectOnDeck(object, deckSupplier)
                unpackChain.add(function(chain)
                    inactiveCharacterBox.takeObject({
                        guid = object.GUID,
                        smooth = false,
                        callback_function = function(card)
                            deckSupplier().putObject(--[[---@type tts__Card]] card)
                            chain.proceed()
                        end
                    })
                end)
            end

            for _, object in TableUtil.ipairs(inactiveCharacterBox.getData().ContainedObjects) do
                if Component.isItemCard(object) then
                    putObjectOnDeck(object, Component.shopDeck)
                elseif Component.isPersonalQuestCard(object) then
                    putObjectOnDeck(object, Component.questDeck)
                end
            end

            unpackChain.add(function(chain)
                inactiveCharacterBox.destruct()
                chain.proceed()
            end)
            unpackChain.add(function(chain)
                Character.unpackCharacterBox(player, character)
                chain.proceed()
            end)

            unpackChain.proceed()
            return
        end
    end

    Logger.error("The character box is not in a player zone. Put the box into a player zone of your choice and try again.")
end

---@param playerMat tts__ObjectState
---@param player number
---@param character gh_Save_Character
function Character.placePlayerMat(playerMat, player, character)
    Component.adjustPlayerMatSnapPoints(playerMat)
    local currentMat = Component.playerMat(player)
    local matPosition = currentMat.getPosition()
    currentMat.destruct()

    spawnObjectData({
        data = playerMat,
        position = matPosition + Vector(0, 0.1, 0),
        callback_function = function(obj)
            local effectivePlayerMat = obj
            local class = Game.class(character.class)
            if class.playerMat then
                effectivePlayerMat = obj.setState(--[[---@not nil]] class.playerMat)
            end
            effectivePlayerMat.setLock(true)
            Task.completeForPlayer(Task.Event.Character.Mat, effectivePlayerMat, player, character)
        end
    })
end

---@param characterSheet tts__ObjectState
---@param player number
---@param character gh_Save_Character
function Character.placeCharacterSheet(characterSheet, player, character)
    ---@param notes string[]
    ---@return string
    local function notesToString(notes)
        return table.concat(notes, "\n")
    end

    ---@param hiddenNotes string[]
    ---@return string
    local function hiddenNotesToString(hiddenNotes)
        if not hiddenNotes then
            return ""
        end

        local decodedNotes = --[[---@type string[] ]]{}
        for i, note in ipairs(hiddenNotes) do
            if StringUtil.isBase64(note) then
                decodedNotes[i] = StringUtil.decodeBase64(note)
            else
                decodedNotes[i] = note
            end
        end

        return notesToString(decodedNotes)
    end

    ---@param items gh_Save_Character_Items
    ---@return string
    local function getAllItems(items)
        local holdItems = --[[---@type string[] ]] {}

        for _, itemPosition in pairs(items) do
            for _, itemName in ipairs(itemPosition) do
                table.insert(holdItems, itemName)
            end
        end

        table.sort(holdItems)
        return table.concat(holdItems, "\n")
    end

    local characterSheetState = --[[---@type fantasySetup_CharacterSheet]] {
        ui = {
            Name = character.name,
            xp = tostring(character.xp),
            gold = tostring(character.gold),
            Items = getAllItems(character.items),
            Notes = hiddenNotesToString(character.hiddenNotes),
            NotesFront = notesToString(character.notes),
        },
        buttons = {},
        inputs = { -- this is for older versions of the character sheet which you might find in custom classes
            Name = character.name,
        },
    }

    for i = 1, Character.getLevel(character.xp) do
        characterSheetState.buttons["level" .. tostring(i)] = "u{2717}"
    end

    for i = 1, character.checkmarks do
        characterSheetState.buttons["notes" .. tostring(i)] = "u{2717}"
    end

    for _, perk in ipairs(character.perks) do
        local _, perkIndex = Game.perk(character.class, perk)
        characterSheetState.buttons["perk" .. tostring(perkIndex)] = "u{2717}"
    end

    characterSheet.LuaScriptState = JSON.encode(characterSheetState)

    spawnObjectData({
        data = characterSheet,
        position = Component.characterSheetPosition(player),
        rotation = { 0, 180, 0 },
    })
end

---@param figure tts__Object
---@param character gh_Save_Character
function Character.loadFigureHp(figure, _, character)
    local characterInfo = Game.class(character.class)
    local level = Character.getLevel(character.xp)

    local maxHealth = characterInfo.hp[level]
    if figure.getName() ~= character.class then
        for _, extra in ipairs(--[[---@not nil]] characterInfo.extra) do
            if extra.name == figure.getName() then
                maxHealth = (--[[---@not nil]] extra.hp)[level]
                break
            end
        end
    end

    figure.setTable("health", { value = maxHealth, max = maxHealth })
    figure.call("setHealth")
end

---@param token tts__Object
---@param character gh_Save_Character
function Character.loadHealthToken(token, _, character)
    local characterInfo = Game.class(character.class)
    local level = Character.getLevel(character.xp)
    local maxHealth = characterInfo.hp[level]

    token.setState(maxHealth)
end

---@param abilityDeck seb_WrappedDeck
---@param player number
---@param character gh_Save_Character
function Character.loadAbilities(abilityDeck, player, character)
    local unlockedAbilities = Game.startingAbilities(character.class)
    for _, ability in ipairs(character.abilities) do
        table.insert(unlockedAbilities, ability)
    end

    local secondHandAbilities = TableUtil.filter(unlockedAbilities,
            function(abilityName) return not TableUtil.contains(character.hand, abilityName) end)

    if TableUtil.isEmpty(character.hand) then
        Character.moveAbilityCards(abilityDeck, player, 1, character.class, secondHandAbilities)
    else
        Character.moveAbilityCards(abilityDeck, player, 1, character.class, character.hand)
        Character.moveAbilityCards(abilityDeck, player, 2, character.class, secondHandAbilities)
    end
end

---@param abilityDeck seb_WrappedDeck
---@param player number
---@param targetHand number
---@param className string
---@param abilities string[]
function Character.moveAbilityCards(abilityDeck, player, targetHand, className, abilities)
    local targetPosition = Component.handPosition(player, targetHand)
    for _, abilityName in ipairs(abilities) do
        local abilityCard, distance = Search.nearestInContainedObjects(abilityDeck, abilityName, AbilityMaxDistance)
        if abilityCard then
            if distance ~= AbilityDefaultDistance then
                Logger.warn("Tried to load the ability '%s' for class '%s', but couldn't find it in the ability deck."
                        .. " However, found a similar ability named '%s' which will be used instead."
                        .. " Please verify if this assumption is correct.",
                        abilityName, className, Object.name(--[[---@not nil]] abilityCard))
            end
            abilityDeck.takeObject({
                position = targetPosition,
                smooth = false,
                guid = Object.guid(--[[---@not nil]] abilityCard),
            })
        else
            Logger.error("An ability named '%s' does not exist for the character class '%s'!",
                    abilityName, className)
        end
    end
end

---@param player number
---@param character gh_Save_Character
function Character.loadQuest(player, character)
    if not character.quest then
        return
    end

    local callback = function(card)
        card.setPosition(Component.questPosition(player))
    end
    if not Quest.take(character.quest, callback) then
        Logger.error("A quest named '%s' does not exist. Can't draw the quest from the deck.", character.quest)
    end
end

---@param player number
---@param character gh_Save_Character
function Character.loadPerks(_, player, character)
    local currentDeck = Component.attackModifiers(player)
    local additionalDeck = Component.additionalAttackModifiers(player)

    local chain = Chain()
    for _, perk in ipairs(character.perks) do
        local perkInfo, _ = Game.perk(character.class, perk)

        for _, card in TableUtil.ipairs(perkInfo.add) do
            chain.add(function(c)
                Character.addModifierCard(c, character, additionalDeck, currentDeck, card)
            end)
        end

        for _, card in TableUtil.ipairs(perkInfo.remove) do
            chain.add(function(c)
                Character.removeModifierCard(c, player, character, currentDeck, card)
            end)
        end
    end
    chain.add(function(c)
        currentDeck.shuffle()
        c.proceed()
    end)

    chain.proceed()
end

---@param chain seb_Chain
---@param character gh_Save_Character
---@param additionalDeck seb_WrappedDeck
---@param currentDeck tts__Deck
---@param card string
---@return boolean
function Character.addModifierCard(chain, character, additionalDeck, currentDeck, card)
    Logger.verbose("%s: Adding %s", character.class, card)

    local search = { name = Component.modifierNamePattern(card), isPattern = true }
    local foundCard, _ = Search.inContainedObjects(additionalDeck, search)
    if not foundCard then
        Logger.error("%s, adding: Can't find modifier card %s.", character.class, card)
        return true
    end

    additionalDeck.takeObject({
        guid = Object.guid(--[[---@not nil]] foundCard),
        position = Component.safePosition(),
        smooth = false,
        callback_function = function(c)
            currentDeck.putObject(c)
            chain.proceed()
        end
    })

    return false
end

---@param chain seb_Chain
---@param player number
---@param character gh_Save_Character
---@param currentDeck tts__Deck
---@param card string
---@return boolean
function Character.removeModifierCard(chain, player, character, currentDeck, card)
    Logger.verbose("%s: Removing %s", character.class, card)

    local search = { name = Component.modifierNamePattern(card), isPattern = true }
    local foundCard = Search.inContainer(currentDeck, search)
    if not foundCard then
        Logger.error("%s, removing: Can't find modifier card %s.", character.class, card)
        return true
    end

    currentDeck.takeObject({
        guid = (--[[---@not nil]] foundCard).guid,
        position = Component.safePosition(),
        smooth = false,
        callback_function = function(c)
            Component.discardAttackModifier(--[[---@type tts__Card]] c, player)
            chain.proceed()
        end })

    return false
end

---@param player number
---@param character gh_Save_Character
function Character.loadItems(_, player, character)
    local holdItems = --[[---@type string[] ]] {}

    for position, items in pairs(character.items) do
        local itemPosition = Component.itemPosition(player, position)

        for _, itemName in ipairs(items) do
            if Shop.takeItem(itemName, itemPosition, Constant.Rotation.NORTH) then
                table.insert(holdItems, itemName)
                Character.checkForNegativeItemEffects(character, itemName, itemPosition)
            else
                Logger.error("The item '%s' does not exist. Won't load item.", itemName)
            end
        end
    end

    local itemsAsText = table.concat(holdItems, "\n")
    local characterSheet = Component.characterSheet(player)
    if TableUtil.isEmpty(characterSheet.getInputs()) then
        characterSheet.UI.setAttribute("Items", "text", itemsAsText)
    else
        -- this is for older versions of the character sheet which you might find in custom classes
        characterSheet.editInput({
            index = 1,
            value = itemsAsText,
        })
    end
end

---@param character gh_Save_Character
---@param itemName string
---@param itemPosition tts__Vector
function Character.checkForNegativeItemEffects(character, itemName, itemPosition)
    if not Character.hasNegateItemEffectsPerk(character) then
        local negativeEffect = Game.Items.NegativeEffects[itemName]
        for _ = 1, negativeEffect or 0 do
            Character.dealNegativeItemEffectCard(itemPosition)
        end
    end
end

---@param character gh_Save_Character
---@return boolean
function Character.hasNegateItemEffectsPerk(character)
    for _, perk in ipairs(character.perks) do
        local perkInfo, _ = Game.perk(character.class, perk)
        if perkInfo.ignore == "I" then
            -- TODO use constant
            return true
        end
    end
    return false
end

---@param itemPosition tts__Vector
function Character.dealNegativeItemEffectCard(itemPosition)
    Component.minusOneDeck().takeObject({
        smooth = false,
        -- position set to ensure PLayer -1 cards placed on top of item
        position = itemPosition + Vector(0, 1, 0)
    })
end

---@param curXP number
---@return number
function Character.getLevel(curXP)
    if not curXP then
        curXP = 0
    end
    for i, xp in pairs(Game.XpRequirements) do
        if curXP < xp then
            return i - 1
        end
    end
    return 9
end

---@param player number
---@param characters gh_Save_Characters
function Character.save(player, characters)
    local characterMat = Component.characterMat(player)
    if not characterMat then
        return
    end

    local character = --[[---@type gh_Save_Character]] {}
    character.class = (--[[---@not nil]] characterMat).getDescription()
    local characterSheet = Component.characterSheet(player)
    local characterSheetButtons = characterSheet.getTable("buttons")
    local characterSheetInputs = characterSheet.getTable("inputs")

    if characterSheetInputs then
        -- this is an older version of the sheet, without the inputs where you can directly set the values
        character.name = characterSheetInputs.Name
        character.xp = --[[---@not nil]] tonumber(characterSheetButtons.xp.label)
        character.gold = --[[---@not nil]] tonumber(characterSheetButtons.gold.label)
    else
        character.name = characterSheet.UI.getAttribute("Name", "text")
        character.xp = --[[---@not nil]] tonumber(characterSheet.UI.getAttribute("xp", "text"))
        character.gold = --[[---@not nil]] tonumber(characterSheet.UI.getAttribute("gold", "text"))
        character.notes = StringUtil.split(characterSheet.UI.getAttribute("NotesFront", "text"), "\n")
        character.hiddenNotes = Character.saveHiddenNotes(characterSheet)
    end

    local totalCheckmarks = 0
    for i = 1, 18 do
        if characterSheetButtons["notes" .. i].label ~= "" then
            totalCheckmarks = totalCheckmarks + 1
        end
    end
    character.checkmarks = totalCheckmarks

    character.perks = {}
    for i = 1, 15 do
        if characterSheetButtons["perk" .. i].label ~= "" then
            local perkIndex = Game.internalToRealPerk(character.class, i)
            table.insert(character.perks, perkIndex)
        end
    end

    character.items = Character.saveItems(player)
    character.abilities = Character.saveAbilities(character.class, player)
    character.hand = Character.saveHand(character.class, player)
    character.quest = Character.saveQuest(player)

    characters[tostring(player)] = character
end

---@param characterSheet tts__Object
---@return string[]
function Character.saveHiddenNotes(characterSheet)
    local notes = StringUtil.split(characterSheet.UI.getAttribute("Notes", "text"), "\n")
    for i, note in ipairs(notes) do
        notes[i] = StringUtil.encodeBase64(note)
    end

    return notes
end

---@param player number
---@return gh_Save_Character_Items
function Character.saveItems(player)
    local playerMat = Component.playerMat(player)
    local items = --[[---@type gh_Save_Character_Items ]] {}
    local zoneObjects = Component.playerObjects(player)
    Character.saveItemFromObjects(zoneObjects, playerMat, items)

    for _, characterItems in pairs(items) do
        table.sort(characterItems)
    end

    return items
end

---@param objects tts__Object[] | tts__ObjectState[]
---@param playerMat tts__Object
---@param items gh_Save_Character_Items
function Character.saveItemFromObjects(objects, playerMat, items)
    for _, object in ipairs(--[[---@type (tts__Object | tts__ObjectState)[] ]] objects) do
        if Component.isItemCard(object) then
            local position = Component.itemPositionName(playerMat, object)
            local positionalItems = items[position]
            if not positionalItems then
                positionalItems = {}
                items[position] = positionalItems
            end
            local itemName = StringUtil.strip(Object.name(object))
            table.insert(positionalItems, itemName)
        elseif Object.isContainer(object) then
            Character.saveItemFromObjects(Object.objects(--[[---@type tts__ContainerState]] object), playerMat, items)
        end
    end
end

---@param className string
---@param player number
---@return string[]
function Character.saveAbilities(className, player)
    local abilities = --[[---@type string[] ]] {}
    local zoneObjects = Component.playerObjects(player)
    Character.saveAbilitiesFromObjects(zoneObjects, className, abilities)

    table.sort(abilities)
    return abilities
end

---@param objects tts__Object[] | tts__ObjectState[]
---@param class string
---@param abilities string[]
function Character.saveAbilitiesFromObjects(objects, class, abilities)
    for _, object in ipairs(--[[---@type (tts__Object | tts__ObjectState)[] ]] objects) do
        local abilityName = Component.getAbilityNameForClass(object, class)
        if abilityName ~= nil then
            if not Component.isStartingAbility(class, --[[---@not nil]] abilityName) then
                table.insert(abilities, --[[---@not nil]] abilityName)
            end
        elseif Object.isContainer(object) and not Component.isAbilityDeck(object) then
            Character.saveAbilitiesFromObjects(Object.objects(--[[---@type tts__ContainerState]] object), class, abilities)
        end
    end
end

---@param className string
---@param player number
---@return string[]
function Character.saveHand(className, player)
    local handAbilities = --[[---@type string[] ]] {}
    for _, object in ipairs(Component.playerHand(player)) do
        local abilityName = Component.getAbilityNameForClass(object, className)
        if abilityName ~= nil then
            table.insert(handAbilities, --[[---@not nil]] abilityName)
        end
    end

    return handAbilities
end

---@param player number
---@return number
function Character.saveQuest(player)
    local info = Character.findQuest(player)
    if info then
        return (--[[---@not nil]] info).number
    end
end

---@param player number
---@return nil | gh_Game_Quest_Info
function Character.findQuest(player)
    for _, object in pairs(Component.playerObjects(player)) do
        if Component.isPersonalQuestCard(object) then
            return Component.getQuestInfo(object)
        end
    end
    return nil
end

---@param id string
---@return boolean
function Character.isActive(id)
    return tonumber(id) ~= nil
end

---@param id string
---@return boolean
function Character.isSupported(id)
    local number = tonumber(id)
    return number == nil or number <= Component.playerCount()
end

setupHandler()

return Character
