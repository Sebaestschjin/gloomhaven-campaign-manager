local EventManager = require('ge_tts.EventManager')
local Json = require('ge_tts.Json')
local TableUtil = require('sebaestschjin-tts.TableUtil')

local Savefile = require("gloomhaven-campaign-manager.Savefile")
local Cleanup = require('gloomhaven-campaign-manager.Cleanup')
local Component = require('gloomhaven-campaign-manager.Component')
local Achievement = require('gloomhaven-campaign-manager.Achievement')
local Character = require('gloomhaven-campaign-manager.Character')
local Enhancement = require('gloomhaven-campaign-manager.Enhancement')
local Event = require('gloomhaven-campaign-manager.Event')
local EventType = require('gloomhaven-campaign-manager.EventType')
local Expansion = require('gloomhaven-campaign-manager.Expansion')
local Options = require('gloomhaven-campaign-manager.Options')
local Party = require('gloomhaven-campaign-manager.Party')
local Player = require('gloomhaven-campaign-manager.Player')
local Preparation = require('gloomhaven-campaign-manager.Preparation')
local Prosperity = require('gloomhaven-campaign-manager.Prosperity')
local Retirement = require('gloomhaven-campaign-manager.Retirement')
local Sanctuary = require('gloomhaven-campaign-manager.Sanctuary')
local Scenario = require('gloomhaven-campaign-manager.Scenario')
local Shop = require('gloomhaven-campaign-manager.Shop')
local Unlocked = require('gloomhaven-campaign-manager.Unlocked')

-- 2163619993
local CampaignManager = {}

---@type number[]
CampaignManager.VERSION = { 2, 5, 0 }

function CampaignManager.replaceComponents()
    Preparation.replaceComponents()
end

function CampaignManager.loadAll()
    local content = Savefile.load()
    if content then
        CampaignManager.setupEventHandlers(--[[---@type gh_Savefile]] content)
        EventManager.triggerEvent(EventType.Loaded.Start)
    end
end

---@param savefile gh_Savefile
function CampaignManager.setupEventHandlers(savefile)
    Preparation.setup()
    Cleanup.setup()

    Achievement.setup(savefile)
    Enhancement.setup(savefile)
    Event.setup(savefile)
    Expansion.setup()
    Options.setup(savefile)
    Party.setup(savefile)
    Player.setup(savefile)
    Prosperity.setup(savefile)
    Retirement.setup(savefile)
    Sanctuary.setup(savefile)
    Scenario.setup(savefile)
    Shop.setup()
    Unlocked.setup(savefile)
end

---@type string[]
local requiredForSave = {}

function CampaignManager.saveAll()
    requiredForSave = { EventType.Saved.Achievements, EventType.Saved.Items }

    for _, required in ipairs(requiredForSave) do
        EventManager.addHandler(required, function(savefile)
            CampaignManager.tryFinishSave(required, savefile)
        end)
    end

    CampaignManager.createSaveFile()
end

---@param event string
---@param savefile gh_Savefile
function CampaignManager.tryFinishSave(event, savefile)
    TableUtil.removeValue(requiredForSave, event)

    if TableUtil.isEmpty(requiredForSave) then
        Savefile.save(savefile)
        local scenarioTree = Scenario.saveScenarioTree(savefile)
        Savefile.saveScenarioTree(scenarioTree)
    end
end

function CampaignManager.createSaveFile()
    local savefile = Savefile.create()

    Preparation.prepareSave()
    -- this wait is necessary, because the scripting zones have to be adjusted, otherwise they won't detect cards lying
    -- directly on the table
    Wait.time(function()
        CampaignManager.doCreateSaveFile(savefile)
    end, 1)
end

---@param savefile gh_Savefile
function CampaignManager.doCreateSaveFile(savefile)
    local battleGoals = Component.battleGoalsDeck().getObjects()
    Options.loadExtendedBattleGoals = TableUtil.length(battleGoals) > 24

    Achievement.saveAll(savefile)
    Enhancement.saveAll(savefile)
    Event.saveAll(savefile)
    Party.saveAll(savefile)
    Player.saveAll(savefile)
    Prosperity.saveAll(savefile)
    Scenario.saveAll(savefile)
    Unlocked.saveAll(savefile)
    Options.saveAll(savefile)
end

function CampaignManager.upgradeSavefile()
    local savefile = Savefile.load()
    if savefile then
        Savefile.save(--[[---@not nil]] savefile)
    end
end

---@shape gh_Func_packCharacter
---@field player number

--- Called from the replaced "Remove Character" button
---@param parameters gh_Func_packCharacter
function packCharacter(parameters)
    Character.packCharacterBox(parameters.player)
end

---@shape gh_Func_unpackCharacter
---@field guid GUID the GUID of the bag containing the character
---@field character string the character data as a string (of type gh_Save_Character)

--- Called from the "Unpack" button on packed characters
---@param parameters gh_Func_unpackCharacter
function unpackCharacter(parameters)
    Character.unpackInactiveCharacterBox(parameters.guid, Json.decode(parameters.character))
end

return CampaignManager
