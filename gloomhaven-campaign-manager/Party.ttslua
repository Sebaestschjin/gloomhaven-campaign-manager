local Json = require("ge_tts.Json")

local Logger = require("sebaestschjin-tts.Logger")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Character = require("gloomhaven-campaign-manager.Character")
local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Options = require("gloomhaven-campaign-manager.Options")
local Task = require("gloomhaven-campaign-manager.Task")

local Party = {}

---@param savefile gh_Savefile
local function fireClassesReady(savefile)
    for className, _ in pairs(Game.Classes) do
        Task.completeForCharacter(Task.Event.Loaded.Class.Start, savefile, className)
    end
end

local function setupHandler()
    Task.registerLoad(Party.load, Task.Event.Loaded.Start)
    Task.registerLoad(fireClassesReady, Task.Event.Loaded.Items)
    Task.registerForCharacter(Party.mayLoadCharacter, Task.Event.Loaded.Class.Enhanced)
end

---@param savefile gh_Savefile
function Party.load(savefile)
    local party = savefile.party
    local partySheet = Component.partySheet()

    partySheet.setName(party.name)
    partySheet.UI.setAttribute("partyName", "text", party.name)
    partySheet.UI.setAttribute("location", "text", party.location)
    partySheet.UI.setAttribute("notes", "text", table.concat(party.notes, "\n"))
    partySheet.UI.setAttribute("partyAchiev", "text", table.concat(party.achievements, "\n"))
    partySheet.call("addSub", { "partyReputation", party.reputation })

    for id, character in pairs(party.characters) do
        if Character.isActive(id) and Character.isSupported(id) then
            local player = --[[---@not nil]] tonumber(id)
            if TableUtil.isNotEmpty(character) then
                Party.setPartySheetCharacter(player, character)
            end
        end
    end
    Party.setPartySheetAverageLevel(party.characters)
end

---@param content gh_Savefile
---@param characterClass string
function Party.mayLoadCharacter(content, characterClass)
    for id, character in pairs(content.party.characters) do
        if character.class == characterClass then
            if Character.isActive(id) then
                local player = --[[---@not nil]] tonumber(id)
                if Character.isSupported(id) then
                    Character.load(player, character)
                else
                    Logger.warn("Tried to load character number %s, but this version only supports %s players."
                            .. " The character will be loaded as an inactive character instead", player, Component.playerCount())
                    Character.loadInactive(character)
                end
            else
                Character.loadInactive(character)
            end
        end
    end
end

---@param position number
---@param character gh_Save_Character
function Party.setPartySheetCharacter(position, character)
    if position > 4 then
        Logger.warn("The party sheet only supports 4 players, but a fifth should be added. It will not be added, but"
                .. " its level will still be considered for calculating the scenario level.")
        return
    end

    local partySheet = Component.partySheet()
    local partySheetAttributeNames = --[[---@type string[] ]] { "playerone", "playertwo", "playerthree", "playerfour" }
    local attributeName = partySheetAttributeNames[position]
    local attributeLvlName = attributeName .. 'lvl'
    local level = Character.getLevel(character.xp)

    partySheet.UI.setAttribute(attributeName, "text", character.name)
    partySheet.UI.setAttribute(attributeLvlName, "text", level)
end

---@param characters gh_Save_Characters
function Party.setPartySheetAverageLevel(characters)
    local partySheet = Component.partySheet()
    local sum, numPlayers = 0, 0
    for id, character in pairs(characters) do
        if Character.isActive(id) and Character.isSupported(id) then
            sum = sum + Character.getLevel(character.xp)
            numPlayers = numPlayers + 1
        end
    end
    local average = sum / numPlayers
    local scenarioLevel = math.ceil(average / 2)

    local difficultyName = Options.difficulty
    local difficulty = Game.Difficulty[difficultyName]
    if not difficulty then
        Logger.warn("Difficulty %s is not available. Will default to 'Normal'.", difficultyName)
    else
        partySheet.UI.setAttribute("difficulty", "text", difficultyName)
        partySheet.UI.setAttribute("difficulty", "value", tostring(difficulty))
        scenarioLevel = scenarioLevel + difficulty
    end

    partySheet.UI.setAttribute("averageLevel", "text", --[[---@not nil]] tonumber(string.format("%.2f", average)))
    partySheet.UI.setAttribute("scenarioLevel", "text", --[[---@not nil]] tonumber(string.format("%d", scenarioLevel)))
end

---@param savefile gh_Savefile
function Party.saveAll(savefile)
    local party = savefile.party

    local partySheet = Component.partySheet()
    party.name = partySheet.UI.getAttribute("partyName", "text")
    party.location = partySheet.UI.getAttribute("location", "text")
    party.notes = StringUtil.split(partySheet.UI.getAttribute("notes", "text"), "\n")
    party.achievements = StringUtil.split(partySheet.UI.getAttribute("partyAchiev", "text"), { ",", "\n" })
    party.reputation = --[[---@not nil]] tonumber(partySheet.UI.getAttribute("partyReputation", "text"))
    Options.difficulty = --[[---@type gh_Game_Difficulty]] partySheet.UI.getAttribute("difficulty", "text")

    party.characters = --[[---@type gh_Save_Characters ]]{}
    for player = 1, Component.playerCount() do
        Character.save(player, party.characters)
    end

    for i, inactiveCharacterBox in ipairs(Component.inactiveCharacters()) do
        local id = "inactive" .. tostring(i)
        party.characters[id] = Json.decode(inactiveCharacterBox.script_state)
    end

    Task.completeSave(Task.Event.Saved.Party, savefile)
end

setupHandler()

return Party
