local Logger = require("sebaestschjin-tts.Logger")
local Search = require("sebaestschjin-tts.Search")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Task = require("gloomhaven-campaign-manager.Task")

local Scenario = {}

local function setupHandler()
    Task.registerLoad(Scenario.loadAll, Task.Event.Loaded.Start)

    Task.registerSave(Scenario.saveAll, Task.Event.Saved.Start)
end

---@type table<string, gh_Scenario_State>
local State = {
    Open = "Open",
    Done = "Done",
    Locked = "Locked",
}

---@param savefile gh_Savefile
function Scenario.loadAll(savefile)
    local scenarios = savefile.global.scenarios
    local scenarioStickers = --[[---@type fantasySetup_Scenario_Stickers]] Component.map().getTable("tableML")

    local randomScenarioDeck = Component.randomScenarioDeck()
    for number, state in pairs(scenarios) do
        local stickerGuid = Scenario.findStickerGuid(scenarioStickers, number)
        Scenario.placeSticker(stickerGuid, number, state)

        if Scenario.isRandomScenario(number) then
            Scenario.removeRandomScenario(randomScenarioDeck, number)
        end
    end
end

---@param scenarioStickers fantasySetup_Scenario_Stickers
---@param number string
---@return GUID
function Scenario.findStickerGuid(scenarioStickers, number)
    for stickerGuid, info in pairs(scenarioStickers) do
        if tostring(info.number) == number then
            return stickerGuid
        end
    end
end

---@param stickerGuid GUID
---@param number string
---@param state gh_Scenario_State
function Scenario.placeSticker(stickerGuid, number, state)
    Logger.verbose("Placing scenario " .. number .. " as " .. state)
    local map = Component.map()
    if state == State.Open then
        map.call("clickedML", stickerGuid)
    elseif state == State.Done then
        map.call("clickedML", stickerGuid)
        map.call("oneClick", { stickerGuid })
    elseif state == State.Locked then
        map.call("clickedML", stickerGuid)
        map.call("triClick", { stickerGuid })
    else
        Logger.error("Unknown scenario state '%s'", state)
    end
end

---@param number string
---@return boolean
function Scenario.isRandomScenario(number)
    return Game.RandomScenarios[--[[---@not nil]] tonumber(number)] ~= nil
end

---@param randomScenarioDeck seb_WrappedDeck
---@param number string
function Scenario.removeRandomScenario(randomScenarioDeck, number)
    local cardId = Component.getScenarioCardId(Game.RandomScenarios[--[[---@not nil]] tonumber(number)])
    local scenarioCard, index = Search.inContainedObjects(randomScenarioDeck, { cardId = cardId })
    if not scenarioCard then
        Logger.error("Can't find the random scenario %d in the deck. Can't remove the card. Expected cardId %s", number, cardId)
        return
    end

    randomScenarioDeck.takeObject({
        index = index,
        position = Component.safePosition(),
        callback_function = function(obj)
            Component.discardScenario(--[[---@type tts__Card]]obj)
        end,
    })
end

---@param savefile gh_Savefile
function Scenario.saveAll(savefile)
    local map = Component.map()
    local scenarioStickers = --[[---@type fantasySetup_Scenario_Stickers]] map.getTable("tableML")
    local unlockedScenarios = map.getTable("locations")

    for stickerGuid, info in pairs(scenarioStickers) do
        if getObjectFromGUID(stickerGuid) ~= nil and info.number ~= nil then
            local state = State.Open
            if unlockedScenarios[stickerGuid] then
                if unlockedScenarios[stickerGuid][1] == 1 then
                    state = State.Locked
                else
                    state = State.Done
                end
            end
            savefile.global.scenarios[tostring(info.number)] = state
        end
    end
end

--- Creates a table from the given savefile that can be used for the Gloomhaven Scenario Tree
---@param savefile gh_Savefile
---@return gh_ScenarioTree
function Scenario.saveScenarioTree(savefile)
    local scenarioTree = --[[---@type gh_ScenarioTree]] {
        nodes = {}, version = "2",
    }

    if savefile.global and savefile.global.scenarios then
        for id, state in pairs(savefile.global.scenarios) do
            local scenario = --[[---@type gh_ScenarioTree_Node]]{}
            scenario.id = id

            local treasures = --[[---@type gh_ScenarioTree_Treasures]] {}
            for _, treasure in ipairs(Game.Scenario[--[[---@not nil]] tonumber(id)]) do
                if TableUtil.contains(savefile.unlocked.treasures, treasure) then
                    local treasureId = string.format("%02d", treasure)
                    treasures[treasureId] = { looted = "true" }
                end
            end

            if TableUtil.isNotEmpty(treasures) then
                scenario.treasure = treasures
            end

            if state == State.Done then
                scenario.status = "complete"
            else
                if TableUtil.isNotEmpty(scenario.treasure) then
                    scenario.status = "attempted"
                else
                    scenario.status = "incomplete"
                end
            end

            table.insert(scenarioTree.nodes, scenario)
        end
    end

    return scenarioTree
end

setupHandler()

return Scenario
