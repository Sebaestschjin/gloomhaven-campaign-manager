local Chain = require('sebaestschjin-tts.Chain')
local Logger = require('sebaestschjin-tts.Logger')
local Search = require("sebaestschjin-tts.Search")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Sanctuary = require("gloomhaven-campaign-manager.Sanctuary")
local Shop = require("gloomhaven-campaign-manager.Shop")
local Task = require("gloomhaven-campaign-manager.Task")

local Unlocked = {}

local shopLoaded = false
local expansionLoaded = false

---@param savefile gh_Savefile
local function mayPlaceOpeningConditions(savefile)
    if TableUtil.isNotEmpty(savefile.unlocked.specialConditions) then
        Component.placeOpeningConditions(savefile)
    end
end

local function setupHandler()
    Task.registerLoad(Unlocked.loadOpeningConditions, Task.Event.Placed.OpeningConditions)
    Task.registerLoad(Unlocked.loadTreasures, Task.Event.Placed.Treasure)

    Task.registerLoad(mayPlaceOpeningConditions, Task.Event.Loaded.Start)

    Task.registerLoad(function(savefile)
        shopLoaded = true
        Unlocked.loadItems(savefile)
    end, Task.Event.Loaded.Shop)
    Task.registerLoad(function(savefile)
        expansionLoaded = true
        Unlocked.loadItems(savefile)
    end, Task.Event.Loaded.Expansion)
    Task.registerForCharacter(Unlocked.mayLoadClass, Task.Event.Loaded.Class.Start)

    Task.registerSave(Unlocked.saveAll, Task.Event.Saved.Start)
end

---@param savefile gh_Savefile
---@param className string
function Unlocked.mayLoadClass(savefile, className)
    for i, unlockedClass in ipairs(savefile.unlocked.classes) do
        if unlockedClass == className then
            Unlocked.loadClass(savefile, i, className)
            return
        end
    end
    Task.completeForCharacter(Task.Event.Loaded.Class.Unlocked, savefile, className)
end

---@param savefile gh_Savefile
---@param number number
---@param className string
function Unlocked.loadClass(savefile, number, className)
    Logger.info('Unlocking class %s', className)

    local lastBox = Component.lastCharacterBox()
    local beforeLastBox = Component.beforeLastCharacterBox()
    local delta = (lastBox.getPosition() - beforeLastBox.getPosition()) * number
    local class = Game.class(className)

    ---@param classBox tts__Object
    local function finishUnlockClass(classBox)
        classBox.setLock(true)
        Task.completeForCharacter(Task.Event.Loaded.Class.Unlocked, savefile, className)
    end

    if class.isHidden then
        local envelopeXReward = Component.envelopeXReward()
        spawnObjectData({
            data = envelopeXReward,
            position = lastBox.getPosition() + delta,
            rotation = lastBox.getRotation(),
            callback_function = finishUnlockClass,
        })
    else
        Component.lockedClasses().takeObject({
            position = lastBox.getPosition() + delta,
            rotation = lastBox.getRotation(),
            smooth = false,
            guid = class.boxGuid,
            callback_function = finishUnlockClass,
        })
    end
end

---@param savefile gh_Savefile
function Unlocked.loadItems(savefile)
    if not expansionLoaded or not shopLoaded then
        return
    end

    Logger.info("Loading unlocked items")

    local chain = Chain()
    local shopDeck = Component.shopDeck()

    for _, item in pairs(savefile.unlocked.items) do
        chain.add(function(c)
            Shop.takeRewardItem(item, function(itemCard)
                shopDeck.putObject(--[[---@type tts__Card]] itemCard)
                c.proceed()
            end)
        end)
    end

    chain.add(function()
        Task.completeLoad(Task.Event.Loaded.Items, savefile)
    end)

    chain.proceed()
end

---@param savefile gh_Savefile
function Unlocked.loadOpeningConditions(savefile)
    Logger.info("Loading opening conditions")
    local openingConditions = savefile.unlocked.specialConditions

    local sheet = --[[---@not nil]] Component.openingConditions()

    Unlocked.setOpeningCondition(sheet, openingConditions.ancientTechnology, "Ancient")
    Unlocked.setOpeningCondition(sheet, openingConditions.drakeAided, "Drake")
    Unlocked.setOpeningCondition(sheet, openingConditions.lowReputation, "RepN10")
    Unlocked.setOpeningCondition(sheet, openingConditions.lowestReputation, "RepN20")
    Unlocked.setOpeningCondition(sheet, openingConditions.highReputation, "Rep10")
    Unlocked.setOpeningCondition(sheet, openingConditions.highestReputation, "Rep20")

    if openingConditions.retired then
        sheet.call("clickedToggle", "Retire")
        Component.placeTownRecords()
    end

    for i = 1, openingConditions.donations do
        Unlocked.setOpeningCondition(sheet, true, "Donation" .. i)
    end
    if openingConditions.donations >= 10 then
        Unlocked.setOpeningCondition(sheet, true, "DonationFull")
    end
end

---@param sheet tts__Object
---@param done nil | boolean
---@param conditionName string
function Unlocked.setOpeningCondition(sheet, done, conditionName)
    if done then
        sheet.call("clickedToggle", conditionName)
    end
end

---@param savefile gh_Savefile
function Unlocked.loadTreasures(savefile)
    local treasures = savefile.unlocked.treasures
    local treasureDeck = --[[---@not nil]] Component.treasureDeck()

    for _, treasure in ipairs(treasures) do
        local treasureCard = Search.inContainer(treasureDeck, { name = tostring(treasure) })
        if not treasureCard then
            Logger.error("Treasure '%s' does not exist. Treasure won't be loaded.", treasure)
        else
            treasureDeck.takeObject({
                index = (--[[---@not nil]] treasureCard).index,
                position = Component.safePosition(),
                callback_function = function(obj)
                    Component.discardTreasure(--[[---@type tts__Card]] obj)
                end,
            })
        end
    end

    Task.completeLoad(Task.Event.Loaded.Treasure, savefile)
end

---@param savefile gh_Savefile
function Unlocked.saveAll(savefile)
    Unlocked.saveClasses(savefile.unlocked.classes)
    savefile.unlocked.sanctuary = Sanctuary.save()
    Unlocked.saveOpeningConditions(savefile.unlocked.specialConditions)
    Unlocked.saveTreasures(savefile.unlocked.treasures)
    Shop.save(savefile)
end

---@param classes string[]
function Unlocked.saveClasses(classes)
    for className, info in pairs(Game.Classes) do
        local box = Component.classBox(className)
        if box ~= nil and not info.isStartingClass then
            table.insert(classes, className)
        end
    end
    table.sort(classes)
end

---@param openingConditions gh_Save_Unlocked_Conditions
function Unlocked.saveOpeningConditions(openingConditions)
    local openingConditionsSheet = Component.openingConditions()
    if not openingConditionsSheet then
        return
    end

    local buttons = (--[[---@not nil]] openingConditionsSheet).getTable("buttons")
    openingConditions.ancientTechnology = buttons["Ancient"].label ~= ""
    openingConditions.drakeAided = buttons["Drake"].label ~= ""
    openingConditions.lowReputation = buttons["RepN10"].label ~= ""
    openingConditions.lowestReputation = buttons["RepN20"].label ~= ""
    openingConditions.highReputation = buttons["Rep10"].label ~= ""
    openingConditions.highestReputation = buttons["Rep20"].label ~= ""
    openingConditions.retired = buttons["Retire"].label ~= ""
    local donations = 0
    for i = 1, 10 do
        if buttons["Donation" .. i].label ~= "" then
            donations = donations + 1
        end
    end
    openingConditions.donations = donations
end

---@param treasures number[]
function Unlocked.saveTreasures(treasures)
    local treasureDeck, _ = Component.treasureDeckData()

    if not treasureDeck then
        Logger.warn("Could not find the treasure deck in the gamebox. Can not save unlocked treasures.")
        return
    end

    local allTreasures = --[[---@type table<number, boolean>]] {}
    for i = 1, 96 do
        allTreasures[i] = true
    end

    local treasureCards = (--[[---@type tts__ContainerState]] treasureDeck).ContainedObjects
    for _, treasureCard in pairs(treasureCards) do
        local cardName = --[[---@not nil]] treasureCard.Nickname
        local treasureNumber = --[[---@not nil]] tonumber(cardName:sub(-2))
        allTreasures[treasureNumber] = false
    end

    for treasure, unlocked in pairs(allTreasures) do
        if unlocked then
            table.insert(treasures, treasure)
        end
    end
end

setupHandler()

return Unlocked
